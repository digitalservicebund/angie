@use "mixins/a11y";

$ring-radius: 1.25rem;
$ring-diameter: $ring-radius * 2;
$dot-radius: 0.75rem;
/* stylelint-disable no-descending-specificity */
// you cannot really style the actual html radio button, so we hide it
.ds-radio,
input[type="radio"]:not([class]) {
  @include a11y.sr-only;
}

input[type="radio"]:not([class]) + label,
input[type="radio"]:not([class]) + label::before,
input[type="radio"]:not([class]) + label::after,
.ds-radio + label,
.ds-radio + label::before,
.ds-radio + label::after {
  --ring-radius: 1.25rem;
  --ring-diameter: calc(var(--ring-radius) * 2);
  --dot-radius: 0.75rem;
  --text-padding-left: 1rem;
  --text-padding-top: 0.4375rem;
}

.ds-radio + label,
input[type="radio"]:not([class]) + label {
  position: relative;
  display: inline-block;
  padding-top: var(--text-padding-top);
  padding-left: calc(var(--ring-diameter) + var(--text-padding-left));
  min-height: var(--ring-diameter);
  touch-action: manipulation;
  cursor: pointer;
}

// we construct a visual radio button using the pseudo elements of the label
.ds-radio + label::before,
.ds-radio + label::after,
input[type="radio"]:not([class]) + label::before,
input[type="radio"]:not([class]) + label::after {
  content: "";
  display: block;
  position: absolute;
  top: var(--ring-radius);
  left: 0;
  transform: translateY(-50%);
}

// :before = the outer ring
.ds-radio + label::before,
input[type="radio"]:not([class]) + label::before {
  left: 0;
  width: var(--ring-diameter);
  height: var(--ring-diameter);
  box-shadow: inset 0 0 0 0.125rem var(--color-ui-primary);
  border-radius: 50%;
}

.ds-radio:focus + label::before,
.ds-radio:focus-visible + label::before,
input[type="radio"]:not([class]):focus + label::before,
input[type="radio"]:not([class]):focus-visible + label::before {
  box-shadow: inset 0 0 0 0.25rem var(--color-ui-primary);
}

// :after = the dot in the middle
.ds-radio:checked + label::after,
input[type="radio"]:not([class]):checked + label::after {
  left: calc(var(--ring-radius) - var(--dot-radius));
  width: 0;
  height: 0;

  // use border to fill the dot to keep it checked even when background colors are disabled (e.g. when printed out)
  border: solid var(--dot-radius) var(--color-ui-primary);
  background-color: var(--color-ui-primary);
  border-radius: 50%;
}

.ds-radio[disabled] + label,
input[type="radio"]:not([class])[disabled] + label {
  cursor: default;
}

.ds-radio[disabled] + label::before,
input[type="radio"]:not([class])[disabled] + label::before {
  box-shadow: inset 0 0 0 0.125rem var(--color-ui-disabled);
}

.ds-radio[disabled] + label::after,
input[type="radio"]:not([class])[disabled] + label::after {
  border-color: var(--color-ui-disabled);
  background-color: var(--color-ui-disabled);
}

.ds-radio:not(:disabled):hover + label::before,
input[type="radio"]:not([class]):not(:disabled):hover + label::before {
  box-shadow: inset 0 0 0 0.25rem var(--color-ui-primary);
}

.ds-radio:not(:focus-visible):focus + label::before,
input[type="radio"]:not([class]):not(:focus-visible):focus + label::before {
  box-shadow: inset 0 0 0 0.125rem var(--color-ui-primary);
}

.ds-radio-small + label,
.ds-radio-small + label::before,
.ds-radio-small + label::after {
  --ring-radius: 1rem;
  --dot-radius: 0.5rem;
  --text-padding-left: 0.75rem;
  --text-padding-top: 0.3125rem;
}

.ds-radio-mini + label,
.ds-radio-mini + label::before,
.ds-radio-mini + label::after {
  --ring-radius: 0.75rem;
  --dot-radius: 0.3125rem;
  --text-padding-left: 0.625rem;
  --text-padding-top: 0.0625rem;
}
/* stylelint-enable no-descending-specificity */
